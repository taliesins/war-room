apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "traefik.fullname" . }}
  labels:
    app: {{ template "traefik.name" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
data:
  traefik.toml: |
    # traefik.toml
    {{- if .Values.debug.enabled }}
    debug = true
    {{- else }}
    logLevel = "INFO"
    {{- end }}
    {{- if .Values.sendAnonymousUsage }}
    sendAnonymousUsage = true
    {{- end }}
    {{- if .Values.ssl.insecureSkipVerify }}
    InsecureSkipVerify = true
    {{- end }}
    {{- if .Values.ssl.enabled }}
    defaultEntryPoints = ["http","https"]
    {{- else }}
    defaultEntryPoints = ["http", "httpn"]
    {{- end }}
    [entryPoints]
      [entryPoints.http]
      address = ":80"
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.http.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      {{- if .Values.gzip.enabled }}
        [entryPoints.http.compress]
      {{- end }}
        {{- if .Values.ssl.enforced }}  
        [entryPoints.http.redirect]
          regex = "^http://(.*)"
          replacement = "https://$1"
        {{- end }}
      {{- if .Values.ping.enabled }}
        [entryPoints.ping]
        {{- if (empty .Values.ping.port) }}
          address = ":82"
        {{- else }}
          address = ":{{ .Values.ping.port }}"
        {{- end }}
      {{- end }}
      {{- if .Values.dashboard.enabled }}
        [entryPoints.api]
        {{- if (empty .Values.dashboard.port) }}
          address = ":81"
        {{- else }}
          address = ":{{ .Values.dashboard.port }}"
        {{- end }}
      {{- end }}
      {{- if .Values.ssl.enabled }}
      [entryPoints.https]
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      address = ":443"
      {{- if .Values.proxyProtocol.enabled }}
        [entryPoints.https.proxyProtocol]
        {{ template "traefik.trustedips" . }}
      {{- end }}
      {{- if .Values.gzip.enabled }}
        [entryPoints.https.compress]
      {{- end }}
        [entryPoints.https.tls]
          {{- if .Values.ssl.tlsMinVersion }}
          minVersion = "{{ .Values.ssl.tlsMinVersion }}"
          {{- end }}
          [[entryPoints.https.tls.certificates]]
          CertFile = "/ssl/tls.crt"
          KeyFile = "/ssl/tls.key"
      {{- else }}
      [entryPoints.httpn]
      {{- if .Values.whiteListSourceRange }}
      {{ template "traefik.whiteListSourceRange" . }}
      {{- end }}
      address = ":8880"
      {{- if .Values.gzip.enabled }}
        [entryPoints.httpn.compress]
      {{- end }}
      {{- end }}
    [kubernetes]
    {{- if .Values.kubernetes }}
      {{- if .Values.kubernetes.endpoint }}
    endpoint = {{ .Values.kubernetes.endpoint | quote }}
      {{- end }}
      {{- if .Values.kubernetes.namespaces }}
    namespaces = [
        {{- range $idx, $element := .Values.kubernetes.namespaces }}
            {{- if $idx }}, {{ end }}
            {{- $element | quote }}
        {{- end -}}
        ]
      {{- end }}
      {{- if .Values.kubernetes.labelSelector }}
    labelselector = {{ .Values.kubernetes.labelSelector | quote }}
      {{- end }}
      {{- if .Values.kubernetes.ingressClass }}
    ingressClass = {{ .Values.kubernetes.ingressClass | quote }}
      {{- end }}
    {{- end }}
    {{- if .Values.accessLogs.enabled }}
    [accessLog]
    {{- if .Values.accessLogs.filePath }}
    filePath = "{{ .Values.accessLogs.filePath }}"
    {{- end }}
      format = "{{ .Values.accessLogs.format }}"
    [accessLog.fields]
      defaultMode = {{ .Values.accessLogs.fields.defaultMode | quote }}
    [accessLog.fields.names]
    {{- range $field, $action := .Values.accessLogs.fields.names }}
      {{ printf "\"%s\" = \"%s\"" $field $action }}
    {{- end }}
    [accessLog.fields.headers]
      defaultMode = {{ .Values.accessLogs.fields.headers.defaultMode | quote }}
    [accessLog.fields.headers.names]
    {{- range $header, $action := .Values.accessLogs.fields.headers.names }}
      {{ printf "\"%s\" = \"%s\"" $header $action }}
    {{- end }}
    {{- end }}
    {{- if .Values.acme.enabled }}
    [acme]
    email = "{{ .Values.acme.email }}"
    storage = "/acme/acme.json"
    entryPoint = "https"
    onHostRule = true
    {{- if .Values.acme.staging }}
    caServer = "https://acme-staging-v02.api.letsencrypt.org/directory"
    {{- end }}
    {{- if .Values.acme.logging }}
    acmeLogging = true
    {{- end }}
    {{- if eq .Values.acme.challengeType "dns-01" }}
      [acme.dnsChallenge]
      provider = "{{ .Values.acme.dnsProvider.name }}"
    {{- else if eq .Values.acme.challengeType "http-01" }}
      [acme.httpChallenge]
      entryPoint = "http"
    {{- end }}
    {{- if .Values.acme.domains.enabled }}
    {{- if .Values.acme.domains.domainsList }}{{ template "traefik.acme.domains" . }}{{- end }}
    {{- end }}
    {{- end }}
    {{- if or .Values.dashboard.enabled .Values.metrics.prometheus.enabled .Values.metrics.statsd.enabled .Values.metrics.datadog.enabled }}
    [api]
      entryPoint = "api"
      {{- if .Values.dashboard.enabled }}
      dashboard = true
      {{- else }}
      dashboard = false
      {{- end }}
    {{- end }}
    {{- if .Values.dashboard.enabled }}
      {{- if .Values.dashboard.auth }}
      {{- if .Values.dashboard.auth.basic }}
      [api.auth.basic]
        users = [{{ range $key, $value := .Values.dashboard.auth.basic }}"{{ $key }}:{{ $value }}",{{ end }}]
      {{- end }}
      {{- end }}
      {{- if .Values.dashboard.statistics }}
      {{- if .Values.dashboard.statistics.recentErrors }}
      [api.statistics]
        RecentErrors = {{ .Values.dashboard.statistics.recentErrors }}
      {{- end }}
      {{- end }}
    {{- end }}
    {{- if .Values.metrics.prometheus.enabled }}
    [api.metrics.prometheus]
      {{- if .Values.metrics.prometheus.buckets }}
      buckets = [
        {{- range $idx, $element := .Values.metrics.prometheus.buckets }}
            {{- if $idx }},{{ end }}
            {{- printf "%.1f" $element }}
        {{- end -}}
        ]
        {{- end -}}
    {{- end }}
    {{- if .Values.metrics.datadog.enabled }}
    [api.metrics.datadog]
      {{- if .Values.metrics.datadog.address }}
      address = {{ .Values.metrics.datadog.address | quote }}
      {{- end }}
      {{- if .Values.metrics.datadog.pushinterval }}
      pushinterval = {{ .Values.metrics.datadog.pushinterval | quote }}
      {{- end }}
    {{- end }}
    {{- if .Values.metrics.statsd.enabled }}
    [api.metrics.statsd]
      {{- if .Values.metrics.statsd.address }}
      address = {{ .Values.metrics.statsd.address | quote }}
      {{- end }}
      {{- if .Values.metrics.statsd.pushinterval }}
      pushinterval = {{ .Values.metrics.statsd.pushinterval | quote }}
      {{- end }}
    {{- end }}
    {{- if .Values.tracing.enabled }}
    [tracing]
      backend = {{ .Values.tracing.backend | quote }}
      serviceName = {{ .Values.tracing.serviceName | quote }}
      {{- if eq .Values.tracing.backend "jaeger" }}
      [tracing.jaeger]
        {{- if .Values.tracing.jaeger.localAgentHostPort }}
        localAgentHostPort = {{ .Values.tracing.jaeger.localAgentHostPort | quote }}
        {{- end }}
        {{- if .Values.tracing.jaeger.samplingServerUrl }}
        samplingServerUrl = {{ .Values.tracing.jaeger.samplingServerUrl | quote }}
        {{- end }}
        {{- if .Values.tracing.jaeger.samplingType }}
        samplingType = {{ .Values.tracing.jaeger.samplingType | quote }}
        {{- end }}
        {{- if ne (.Values.tracing.jaeger.samplingParam | quote) "" }}
        samplingParam = {{ .Values.tracing.jaeger.samplingParam }}
        {{- end }}
      {{- end }}
      {{- if eq .Values.tracing.backend "zipkin" }}
      [tracing.zipkin]
        {{- if .Values.tracing.zipkin.httpEndpoint }}
        httpEndpoint = {{ .Values.tracing.zipkin.httpEndpoint | quote }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.debug | quote) "" }}
        debug = {{ .Values.tracing.zipkin.debug }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.sameSpan | quote) "" }}
        sameSpan = {{ .Values.tracing.zipkin.sameSpan }}
        {{- end }}
        {{- if ne (.Values.tracing.zipkin.id128bit | quote) "" }}
        id128bit = {{ .Values.tracing.zipkin.id128bit }}
        {{- end }}
      {{- end }}
    {{- end }}
    {{- if .Values.ping.enabled }}
    [ping]
      entryPoint = "ping"
    {{- end }}